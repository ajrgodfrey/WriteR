ID_CENTEREDTEXT = wx.NewId()
ID_RIGHTALIGNED = wx.NewId()
ID_BOLD = wx.NewId()
ID_ITALIC = wx.NewId()
ID_MATH = wx.NewId()
ID_SMALLCAPS = wx.NewId()
ID_CHAPTER = wx.NewId()
ID_SECTION = wx.NewId()
ID_EQUATION = wx.NewId()
ID_ITEMIZE = wx.NewId()
ID_ENUMERATE = wx.NewId()
ID_FIGURE = wx.NewId()
ID_TEST = wx.NewId()

                 # (ID_TEST, "Test the console\tF6", "Runs a test in the console", self.OnTest),


    def OnTest(self, event):
        self._mgr.GetPane("console").Show().Bottom().Layer(0).Row(0).Position(0)
        self._mgr.Update()
        self.StartThread(['python', '-u', 'test_out.py'])


    def CreateInteriorWindowComponents(self):
        # self._mgr.AddPane(self.CreateShellCtrl(), wx.aui.AuiPaneInfo().Name("console")
        #                   .Caption("Console").Bottom().Layer(1).Position(1).CloseButton(True).
        #                   MaximizeButton(True).MinimizeButton(True).Hide())

    def run(self):
        printing('hello')
        self.writelineFunc(self.comp_thread.communicate()[0])
        # while True:
        #     if self.flag.isSet():
        #         self.comp_thread.terminate()
        #         return
        #     for line in iter(self.comp_thread.stdout.readline, b''):
        #         if self.flag.isSet():
        #             self.comp_thread.terminate()
        #             return
        #         printing("line", line)
        #         self.writelineFunc(line)
        printing("on my way out")


    def push(self, command):
        printing("command", command)
        command = command.strip()
        if not command: return
        self.bp.stdin.write(command + "\n")
        # wait a bit
        sleep(.1)
        # print output
        self.stdout.write(self.outputThread.getOutput())
        # print error
        # self.stderr.write(self.errorThread.getOutput())

    def getAutoCompleteList(self, *args, **kwargs):
        return []

    def getAutoCompleteKeys(self):
        return [ord('\t')]
    def getCallTip(self, command):
        return ""

